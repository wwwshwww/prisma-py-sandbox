# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    createdAt: datetime.datetime
    posts: 'PostCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    createdAt: datetime.datetime


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    name: _str


class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]


_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

UserWhereUniqueInput = _UserWhereUnique_id_Input


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    createdAt: datetime.datetime
    posts: 'PostUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    createdAt: datetime.datetime


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserCreateOrConnectWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserCreateOrConnectWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_name_OrderByInput',
    '_User_createdAt_OrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    posts: Union[bool, 'FindManyPostArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PostIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    tags: Union[bool, 'FindManyTagArgsFromUserRecursive1']
    PostTag: Union[bool, 'FindManyPostTagArgsFromUserRecursive1']


class PostIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    tags: Union[bool, 'FindManyTagArgsFromUserRecursive2']
    PostTag: Union[bool, 'FindManyPostTagArgsFromUserRecursive2']


class PostIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    tags: Union[bool, 'FindManyTagArgsFromUserRecursive3']
    PostTag: Union[bool, 'FindManyPostTagArgsFromUserRecursive3']


class PostIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    tags: Union[bool, 'FindManyTagArgsFromUserRecursive4']
    PostTag: Union[bool, 'FindManyPostTagArgsFromUserRecursive4']


class PostIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PostArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPostArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    
    

class TagIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive1']
    PostTag: Union[bool, 'FindManyPostTagArgsFromUserRecursive1']


class TagIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive2']
    PostTag: Union[bool, 'FindManyPostTagArgsFromUserRecursive2']


class TagIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive3']
    PostTag: Union[bool, 'FindManyPostTagArgsFromUserRecursive3']


class TagIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive4']
    PostTag: Union[bool, 'FindManyPostTagArgsFromUserRecursive4']


class TagIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class TagArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'TagIncludeFromTagRecursive1'


class TagArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'TagIncludeFromTagRecursive2'


class TagArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'TagIncludeFromTagRecursive3'


class TagArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'TagIncludeFromTagRecursive4'


class TagArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyTagArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive1'


class FindManyTagArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive2'


class FindManyTagArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive3'


class FindManyTagArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive4'


class FindManyTagArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    
    

class PostTagIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    post: Union[bool, 'PostArgsFromUserRecursive1']
    tag: Union[bool, 'TagArgsFromUserRecursive1']


class PostTagIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    post: Union[bool, 'PostArgsFromUserRecursive2']
    tag: Union[bool, 'TagArgsFromUserRecursive2']


class PostTagIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    post: Union[bool, 'PostArgsFromUserRecursive3']
    tag: Union[bool, 'TagArgsFromUserRecursive3']


class PostTagIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    post: Union[bool, 'PostArgsFromUserRecursive4']
    tag: Union[bool, 'TagArgsFromUserRecursive4']


class PostTagIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PostTagArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostTagIncludeFromPostTagRecursive1'


class PostTagArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostTagIncludeFromPostTagRecursive2'


class PostTagArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostTagIncludeFromPostTagRecursive3'


class PostTagArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostTagIncludeFromPostTagRecursive4'


class PostTagArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPostTagArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostTagOrderByInput', List['PostTagOrderByInput']]
    where: 'PostTagWhereInput'
    cursor: 'PostTagWhereUniqueInput'
    distinct: List['PostTagScalarFieldKeys']
    include: 'PostTagIncludeFromPostTagRecursive1'


class FindManyPostTagArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostTagOrderByInput', List['PostTagOrderByInput']]
    where: 'PostTagWhereInput'
    cursor: 'PostTagWhereUniqueInput'
    distinct: List['PostTagScalarFieldKeys']
    include: 'PostTagIncludeFromPostTagRecursive2'


class FindManyPostTagArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostTagOrderByInput', List['PostTagOrderByInput']]
    where: 'PostTagWhereInput'
    cursor: 'PostTagWhereUniqueInput'
    distinct: List['PostTagScalarFieldKeys']
    include: 'PostTagIncludeFromPostTagRecursive3'


class FindManyPostTagArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostTagOrderByInput', List['PostTagOrderByInput']]
    where: 'PostTagWhereInput'
    cursor: 'PostTagWhereUniqueInput'
    distinct: List['PostTagScalarFieldKeys']
    include: 'PostTagIncludeFromPostTagRecursive4'


class FindManyPostTagArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostTagOrderByInput', List['PostTagOrderByInput']]
    where: 'PostTagWhereInput'
    cursor: 'PostTagWhereUniqueInput'
    distinct: List['PostTagScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    posts: 'PostListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    posts: 'PostListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    posts: 'PostListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    posts: 'PostListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    posts: 'PostListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    createdAt: datetime.datetime
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    name: _str
    createdAt: datetime.datetime


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    name: bool
    createdAt: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    name: bool
    createdAt: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'name',
    'createdAt',
    'posts',
]
UserScalarFieldKeys = Literal[
    'id',
    'name',
    'createdAt',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'posts',
    ]

# Post types

class PostOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Post create method"""
    id: _str
    userId: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    tags: 'TagCreateManyNestedWithoutRelationsInput'
    PostTag: 'PostTagCreateManyNestedWithoutRelationsInput'


class PostCreateInput(PostOptionalCreateInput):
    """Required arguments to the Post create method"""
    content: _str
    createdAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PostOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Post create method, without relations"""
    id: _str
    userId: _str


class PostCreateWithoutRelationsInput(PostOptionalCreateWithoutRelationsInput):
    """Required arguments to the Post create method, without relations"""
    content: _str
    createdAt: datetime.datetime


class PostCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PostCreateWithoutRelationsInput'
    connect: 'PostWhereUniqueInput'


class PostCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PostCreateWithoutRelationsInput', List['PostCreateWithoutRelationsInput']]
    connect: Union['PostWhereUniqueInput', List['PostWhereUniqueInput']]


_PostWhereUnique_id_Input = TypedDict(
    '_PostWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

PostWhereUniqueInput = _PostWhereUnique_id_Input


class PostUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    content: _str
    createdAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    tags: 'TagUpdateManyWithoutRelationsInput'
    PostTag: 'PostTagUpdateManyWithoutRelationsInput'


class PostUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    content: _str
    createdAt: datetime.datetime


class PostUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PostCreateWithoutRelationsInput']
    connect: List['PostWhereUniqueInput']
    set: List['PostWhereUniqueInput']
    disconnect: List['PostWhereUniqueInput']
    delete: List['PostWhereUniqueInput']

    # TODO
    # update: List['PostUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PostUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PostScalarWhereInput']
    # upsert: List['PostUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['PostCreateOrConnectWithoutRelationsInput']


class PostUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PostCreateWithoutRelationsInput'
    connect: 'PostWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PostUpdateInput'
    # upsert: 'PostUpsertWithoutRelationsInput'
    # connectOrCreate: 'PostCreateOrConnectWithoutRelationsInput'


class PostUpsertInput(TypedDict):
    create: 'PostCreateInput'
    update: 'PostUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Post_id_OrderByInput = TypedDict(
    '_Post_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Post_userId_OrderByInput = TypedDict(
    '_Post_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Post_content_OrderByInput = TypedDict(
    '_Post_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_Post_createdAt_OrderByInput = TypedDict(
    '_Post_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

PostOrderByInput = Union[
    '_Post_id_OrderByInput',
    '_Post_userId_OrderByInput',
    '_Post_content_OrderByInput',
    '_Post_createdAt_OrderByInput',
]



# recursive Post types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PostRelationFilter = TypedDict(
    'PostRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PostListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PostInclude(TypedDict, total=False):
    """Post relational arguments"""
    user: Union[bool, 'UserArgsFromPost']
    tags: Union[bool, 'FindManyTagArgsFromPost']
    PostTag: Union[bool, 'FindManyPostTagArgsFromPost']


    

class UserIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive1']


class UserIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive2']


class UserIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive3']


class UserIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive4']


class UserIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class UserArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyUserArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PostIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive1']
    tags: Union[bool, 'FindManyTagArgsFromPostRecursive1']
    PostTag: Union[bool, 'FindManyPostTagArgsFromPostRecursive1']


class PostIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive2']
    tags: Union[bool, 'FindManyTagArgsFromPostRecursive2']
    PostTag: Union[bool, 'FindManyPostTagArgsFromPostRecursive2']


class PostIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive3']
    tags: Union[bool, 'FindManyTagArgsFromPostRecursive3']
    PostTag: Union[bool, 'FindManyPostTagArgsFromPostRecursive3']


class PostIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive4']
    tags: Union[bool, 'FindManyTagArgsFromPostRecursive4']
    PostTag: Union[bool, 'FindManyPostTagArgsFromPostRecursive4']


class PostIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class PostArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyPostArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    
    

class TagIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive1']
    PostTag: Union[bool, 'FindManyPostTagArgsFromPostRecursive1']


class TagIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive2']
    PostTag: Union[bool, 'FindManyPostTagArgsFromPostRecursive2']


class TagIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive3']
    PostTag: Union[bool, 'FindManyPostTagArgsFromPostRecursive3']


class TagIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive4']
    PostTag: Union[bool, 'FindManyPostTagArgsFromPostRecursive4']


class TagIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class TagArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'TagIncludeFromTagRecursive1'


class TagArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'TagIncludeFromTagRecursive2'


class TagArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'TagIncludeFromTagRecursive3'


class TagArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'TagIncludeFromTagRecursive4'


class TagArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyTagArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive1'


class FindManyTagArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive2'


class FindManyTagArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive3'


class FindManyTagArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive4'


class FindManyTagArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    
    

class PostTagIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    post: Union[bool, 'PostArgsFromPostRecursive1']
    tag: Union[bool, 'TagArgsFromPostRecursive1']


class PostTagIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    post: Union[bool, 'PostArgsFromPostRecursive2']
    tag: Union[bool, 'TagArgsFromPostRecursive2']


class PostTagIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    post: Union[bool, 'PostArgsFromPostRecursive3']
    tag: Union[bool, 'TagArgsFromPostRecursive3']


class PostTagIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    post: Union[bool, 'PostArgsFromPostRecursive4']
    tag: Union[bool, 'TagArgsFromPostRecursive4']


class PostTagIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class PostTagArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostTagIncludeFromPostTagRecursive1'


class PostTagArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostTagIncludeFromPostTagRecursive2'


class PostTagArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostTagIncludeFromPostTagRecursive3'


class PostTagArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostTagIncludeFromPostTagRecursive4'


class PostTagArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyPostTagArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostTagOrderByInput', List['PostTagOrderByInput']]
    where: 'PostTagWhereInput'
    cursor: 'PostTagWhereUniqueInput'
    distinct: List['PostTagScalarFieldKeys']
    include: 'PostTagIncludeFromPostTagRecursive1'


class FindManyPostTagArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostTagOrderByInput', List['PostTagOrderByInput']]
    where: 'PostTagWhereInput'
    cursor: 'PostTagWhereUniqueInput'
    distinct: List['PostTagScalarFieldKeys']
    include: 'PostTagIncludeFromPostTagRecursive2'


class FindManyPostTagArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostTagOrderByInput', List['PostTagOrderByInput']]
    where: 'PostTagWhereInput'
    cursor: 'PostTagWhereUniqueInput'
    distinct: List['PostTagScalarFieldKeys']
    include: 'PostTagIncludeFromPostTagRecursive3'


class FindManyPostTagArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostTagOrderByInput', List['PostTagOrderByInput']]
    where: 'PostTagWhereInput'
    cursor: 'PostTagWhereUniqueInput'
    distinct: List['PostTagScalarFieldKeys']
    include: 'PostTagIncludeFromPostTagRecursive4'


class FindManyPostTagArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostTagOrderByInput', List['PostTagOrderByInput']]
    where: 'PostTagWhereInput'
    cursor: 'PostTagWhereUniqueInput'
    distinct: List['PostTagScalarFieldKeys']
    


FindManyPostArgs = FindManyPostArgsFromPost
FindFirstPostArgs = FindManyPostArgsFromPost


    

class PostWhereInput(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    tags: 'TagListRelationFilter'
    PostTag: 'PostTagListRelationFilter'

    # should be noted that AND and NOT should be Union['PostWhereInputRecursive1', List['PostWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PostWhereInputRecursive1']
    OR: List['PostWhereInputRecursive1']
    NOT: List['PostWhereInputRecursive1']


class PostWhereInputRecursive1(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    tags: 'TagListRelationFilter'
    PostTag: 'PostTagListRelationFilter'

    # should be noted that AND and NOT should be Union['PostWhereInputRecursive2', List['PostWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PostWhereInputRecursive2']
    OR: List['PostWhereInputRecursive2']
    NOT: List['PostWhereInputRecursive2']


class PostWhereInputRecursive2(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    tags: 'TagListRelationFilter'
    PostTag: 'PostTagListRelationFilter'

    # should be noted that AND and NOT should be Union['PostWhereInputRecursive3', List['PostWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PostWhereInputRecursive3']
    OR: List['PostWhereInputRecursive3']
    NOT: List['PostWhereInputRecursive3']


class PostWhereInputRecursive3(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    tags: 'TagListRelationFilter'
    PostTag: 'PostTagListRelationFilter'

    # should be noted that AND and NOT should be Union['PostWhereInputRecursive4', List['PostWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PostWhereInputRecursive4']
    OR: List['PostWhereInputRecursive4']
    NOT: List['PostWhereInputRecursive4']


class PostWhereInputRecursive4(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    tags: 'TagListRelationFilter'
    PostTag: 'PostTagListRelationFilter'



# aggregate Post types


    

class PostScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PostScalarWhereWithAggregatesInputRecursive1']
    OR: List['PostScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PostScalarWhereWithAggregatesInputRecursive1']


class PostScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PostScalarWhereWithAggregatesInputRecursive2']
    OR: List['PostScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PostScalarWhereWithAggregatesInputRecursive2']


class PostScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PostScalarWhereWithAggregatesInputRecursive3']
    OR: List['PostScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PostScalarWhereWithAggregatesInputRecursive3']


class PostScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PostScalarWhereWithAggregatesInputRecursive4']
    OR: List['PostScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PostScalarWhereWithAggregatesInputRecursive4']


class PostScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class PostGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    content: _str
    createdAt: datetime.datetime
    _sum: 'PostSumAggregateOutput'
    _avg: 'PostAvgAggregateOutput'
    _min: 'PostMinAggregateOutput'
    _max: 'PostMaxAggregateOutput'
    _count: 'PostCountAggregateOutput'


class PostAvgAggregateOutput(TypedDict, total=False):
    """Post output for aggregating averages"""


class PostSumAggregateOutput(TypedDict, total=False):
    """Post output for aggregating sums"""


class PostScalarAggregateOutput(TypedDict, total=False):
    """Post output including scalar fields"""
    id: _str
    userId: _str
    content: _str
    createdAt: datetime.datetime


PostMinAggregateOutput = PostScalarAggregateOutput
PostMaxAggregateOutput = PostScalarAggregateOutput


class PostMaxAggregateInput(TypedDict, total=False):
    """Post input for aggregating by max"""
    id: bool
    userId: bool
    content: bool
    createdAt: bool


class PostMinAggregateInput(TypedDict, total=False):
    """Post input for aggregating by min"""
    id: bool
    userId: bool
    content: bool
    createdAt: bool


class PostNumberAggregateInput(TypedDict, total=False):
    """Post input for aggregating numbers"""


PostAvgAggregateInput = PostNumberAggregateInput
PostSumAggregateInput = PostNumberAggregateInput


PostCountAggregateInput = TypedDict(
    'PostCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'content': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

PostCountAggregateOutput = TypedDict(
    'PostCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'content': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


PostKeys = Literal[
    'id',
    'userId',
    'content',
    'createdAt',
    'user',
    'tags',
    'PostTag',
]
PostScalarFieldKeys = Literal[
    'id',
    'userId',
    'content',
    'createdAt',
]
PostScalarFieldKeysT = TypeVar('PostScalarFieldKeysT', bound=PostScalarFieldKeys)

PostRelationalFieldKeys = Literal[
        'user',
        'tags',
        'PostTag',
    ]

# Tag types

class TagOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Tag create method"""
    id: _str
    posts: 'PostCreateManyNestedWithoutRelationsInput'
    PostTag: 'PostTagCreateManyNestedWithoutRelationsInput'


class TagCreateInput(TagOptionalCreateInput):
    """Required arguments to the Tag create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TagOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Tag create method, without relations"""
    id: _str


class TagCreateWithoutRelationsInput(TagOptionalCreateWithoutRelationsInput):
    """Required arguments to the Tag create method, without relations"""
    name: _str


class TagCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TagCreateWithoutRelationsInput'
    connect: 'TagWhereUniqueInput'


class TagCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TagCreateWithoutRelationsInput', List['TagCreateWithoutRelationsInput']]
    connect: Union['TagWhereUniqueInput', List['TagWhereUniqueInput']]


_TagWhereUnique_id_Input = TypedDict(
    '_TagWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_TagWhereUnique_name_Input = TypedDict(
    '_TagWhereUnique_name_Input',
    {
        'name': '_str',
    },
    total=True
)

TagWhereUniqueInput = Union[
    '_TagWhereUnique_id_Input',
    '_TagWhereUnique_name_Input',
]


class TagUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    posts: 'PostUpdateManyWithoutRelationsInput'
    PostTag: 'PostTagUpdateManyWithoutRelationsInput'


class TagUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str


class TagUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TagCreateWithoutRelationsInput']
    connect: List['TagWhereUniqueInput']
    set: List['TagWhereUniqueInput']
    disconnect: List['TagWhereUniqueInput']
    delete: List['TagWhereUniqueInput']

    # TODO
    # update: List['TagUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TagUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TagScalarWhereInput']
    # upsert: List['TagUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['TagCreateOrConnectWithoutRelationsInput']


class TagUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TagCreateWithoutRelationsInput'
    connect: 'TagWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TagUpdateInput'
    # upsert: 'TagUpsertWithoutRelationsInput'
    # connectOrCreate: 'TagCreateOrConnectWithoutRelationsInput'


class TagUpsertInput(TypedDict):
    create: 'TagCreateInput'
    update: 'TagUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Tag_id_OrderByInput = TypedDict(
    '_Tag_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Tag_name_OrderByInput = TypedDict(
    '_Tag_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

TagOrderByInput = Union[
    '_Tag_id_OrderByInput',
    '_Tag_name_OrderByInput',
]



# recursive Tag types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

TagRelationFilter = TypedDict(
    'TagRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class TagListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class TagInclude(TypedDict, total=False):
    """Tag relational arguments"""
    posts: Union[bool, 'FindManyPostArgsFromTag']
    PostTag: Union[bool, 'FindManyPostTagArgsFromTag']


    

class UserIncludeFromTag(TypedDict, total=False):
    """Relational arguments for Tag"""
    posts: Union[bool, 'FindManyPostArgsFromTagRecursive1']


class UserIncludeFromTagRecursive1(TypedDict, total=False):
    """Relational arguments for Tag"""
    posts: Union[bool, 'FindManyPostArgsFromTagRecursive2']


class UserIncludeFromTagRecursive2(TypedDict, total=False):
    """Relational arguments for Tag"""
    posts: Union[bool, 'FindManyPostArgsFromTagRecursive3']


class UserIncludeFromTagRecursive3(TypedDict, total=False):
    """Relational arguments for Tag"""
    posts: Union[bool, 'FindManyPostArgsFromTagRecursive4']


class UserIncludeFromTagRecursive4(TypedDict, total=False):
    """Relational arguments for Tag"""

    

class UserArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    
    

class FindManyUserArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PostIncludeFromTag(TypedDict, total=False):
    """Relational arguments for Tag"""
    user: Union[bool, 'UserArgsFromTagRecursive1']
    tags: Union[bool, 'FindManyTagArgsFromTagRecursive1']
    PostTag: Union[bool, 'FindManyPostTagArgsFromTagRecursive1']


class PostIncludeFromTagRecursive1(TypedDict, total=False):
    """Relational arguments for Tag"""
    user: Union[bool, 'UserArgsFromTagRecursive2']
    tags: Union[bool, 'FindManyTagArgsFromTagRecursive2']
    PostTag: Union[bool, 'FindManyPostTagArgsFromTagRecursive2']


class PostIncludeFromTagRecursive2(TypedDict, total=False):
    """Relational arguments for Tag"""
    user: Union[bool, 'UserArgsFromTagRecursive3']
    tags: Union[bool, 'FindManyTagArgsFromTagRecursive3']
    PostTag: Union[bool, 'FindManyPostTagArgsFromTagRecursive3']


class PostIncludeFromTagRecursive3(TypedDict, total=False):
    """Relational arguments for Tag"""
    user: Union[bool, 'UserArgsFromTagRecursive4']
    tags: Union[bool, 'FindManyTagArgsFromTagRecursive4']
    PostTag: Union[bool, 'FindManyPostTagArgsFromTagRecursive4']


class PostIncludeFromTagRecursive4(TypedDict, total=False):
    """Relational arguments for Tag"""

    

class PostArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    
    

class FindManyPostArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    
    

class TagIncludeFromTag(TypedDict, total=False):
    """Relational arguments for Tag"""
    posts: Union[bool, 'FindManyPostArgsFromTagRecursive1']
    PostTag: Union[bool, 'FindManyPostTagArgsFromTagRecursive1']


class TagIncludeFromTagRecursive1(TypedDict, total=False):
    """Relational arguments for Tag"""
    posts: Union[bool, 'FindManyPostArgsFromTagRecursive2']
    PostTag: Union[bool, 'FindManyPostTagArgsFromTagRecursive2']


class TagIncludeFromTagRecursive2(TypedDict, total=False):
    """Relational arguments for Tag"""
    posts: Union[bool, 'FindManyPostArgsFromTagRecursive3']
    PostTag: Union[bool, 'FindManyPostTagArgsFromTagRecursive3']


class TagIncludeFromTagRecursive3(TypedDict, total=False):
    """Relational arguments for Tag"""
    posts: Union[bool, 'FindManyPostArgsFromTagRecursive4']
    PostTag: Union[bool, 'FindManyPostTagArgsFromTagRecursive4']


class TagIncludeFromTagRecursive4(TypedDict, total=False):
    """Relational arguments for Tag"""

    

class TagArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'TagIncludeFromTagRecursive1'


class TagArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'TagIncludeFromTagRecursive2'


class TagArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'TagIncludeFromTagRecursive3'


class TagArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'TagIncludeFromTagRecursive4'


class TagArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    
    

class FindManyTagArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive1'


class FindManyTagArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive2'


class FindManyTagArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive3'


class FindManyTagArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive4'


class FindManyTagArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    
    

class PostTagIncludeFromTag(TypedDict, total=False):
    """Relational arguments for Tag"""
    post: Union[bool, 'PostArgsFromTagRecursive1']
    tag: Union[bool, 'TagArgsFromTagRecursive1']


class PostTagIncludeFromTagRecursive1(TypedDict, total=False):
    """Relational arguments for Tag"""
    post: Union[bool, 'PostArgsFromTagRecursive2']
    tag: Union[bool, 'TagArgsFromTagRecursive2']


class PostTagIncludeFromTagRecursive2(TypedDict, total=False):
    """Relational arguments for Tag"""
    post: Union[bool, 'PostArgsFromTagRecursive3']
    tag: Union[bool, 'TagArgsFromTagRecursive3']


class PostTagIncludeFromTagRecursive3(TypedDict, total=False):
    """Relational arguments for Tag"""
    post: Union[bool, 'PostArgsFromTagRecursive4']
    tag: Union[bool, 'TagArgsFromTagRecursive4']


class PostTagIncludeFromTagRecursive4(TypedDict, total=False):
    """Relational arguments for Tag"""

    

class PostTagArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'PostTagIncludeFromPostTagRecursive1'


class PostTagArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'PostTagIncludeFromPostTagRecursive2'


class PostTagArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'PostTagIncludeFromPostTagRecursive3'


class PostTagArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    include: 'PostTagIncludeFromPostTagRecursive4'


class PostTagArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    
    

class FindManyPostTagArgsFromTag(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['PostTagOrderByInput', List['PostTagOrderByInput']]
    where: 'PostTagWhereInput'
    cursor: 'PostTagWhereUniqueInput'
    distinct: List['PostTagScalarFieldKeys']
    include: 'PostTagIncludeFromPostTagRecursive1'


class FindManyPostTagArgsFromTagRecursive1(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['PostTagOrderByInput', List['PostTagOrderByInput']]
    where: 'PostTagWhereInput'
    cursor: 'PostTagWhereUniqueInput'
    distinct: List['PostTagScalarFieldKeys']
    include: 'PostTagIncludeFromPostTagRecursive2'


class FindManyPostTagArgsFromTagRecursive2(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['PostTagOrderByInput', List['PostTagOrderByInput']]
    where: 'PostTagWhereInput'
    cursor: 'PostTagWhereUniqueInput'
    distinct: List['PostTagScalarFieldKeys']
    include: 'PostTagIncludeFromPostTagRecursive3'


class FindManyPostTagArgsFromTagRecursive3(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['PostTagOrderByInput', List['PostTagOrderByInput']]
    where: 'PostTagWhereInput'
    cursor: 'PostTagWhereUniqueInput'
    distinct: List['PostTagScalarFieldKeys']
    include: 'PostTagIncludeFromPostTagRecursive4'


class FindManyPostTagArgsFromTagRecursive4(TypedDict, total=False):
    """Arguments for Tag"""
    take: int
    skip: int
    order_by: Union['PostTagOrderByInput', List['PostTagOrderByInput']]
    where: 'PostTagWhereInput'
    cursor: 'PostTagWhereUniqueInput'
    distinct: List['PostTagScalarFieldKeys']
    


FindManyTagArgs = FindManyTagArgsFromTag
FindFirstTagArgs = FindManyTagArgsFromTag


    

class TagWhereInput(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    PostTag: 'PostTagListRelationFilter'

    # should be noted that AND and NOT should be Union['TagWhereInputRecursive1', List['TagWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['TagWhereInputRecursive1']
    OR: List['TagWhereInputRecursive1']
    NOT: List['TagWhereInputRecursive1']


class TagWhereInputRecursive1(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    PostTag: 'PostTagListRelationFilter'

    # should be noted that AND and NOT should be Union['TagWhereInputRecursive2', List['TagWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['TagWhereInputRecursive2']
    OR: List['TagWhereInputRecursive2']
    NOT: List['TagWhereInputRecursive2']


class TagWhereInputRecursive2(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    PostTag: 'PostTagListRelationFilter'

    # should be noted that AND and NOT should be Union['TagWhereInputRecursive3', List['TagWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['TagWhereInputRecursive3']
    OR: List['TagWhereInputRecursive3']
    NOT: List['TagWhereInputRecursive3']


class TagWhereInputRecursive3(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    PostTag: 'PostTagListRelationFilter'

    # should be noted that AND and NOT should be Union['TagWhereInputRecursive4', List['TagWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['TagWhereInputRecursive4']
    OR: List['TagWhereInputRecursive4']
    NOT: List['TagWhereInputRecursive4']


class TagWhereInputRecursive4(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    PostTag: 'PostTagListRelationFilter'



# aggregate Tag types


    

class TagScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TagScalarWhereWithAggregatesInputRecursive1']
    OR: List['TagScalarWhereWithAggregatesInputRecursive1']
    NOT: List['TagScalarWhereWithAggregatesInputRecursive1']


class TagScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TagScalarWhereWithAggregatesInputRecursive2']
    OR: List['TagScalarWhereWithAggregatesInputRecursive2']
    NOT: List['TagScalarWhereWithAggregatesInputRecursive2']


class TagScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TagScalarWhereWithAggregatesInputRecursive3']
    OR: List['TagScalarWhereWithAggregatesInputRecursive3']
    NOT: List['TagScalarWhereWithAggregatesInputRecursive3']


class TagScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TagScalarWhereWithAggregatesInputRecursive4']
    OR: List['TagScalarWhereWithAggregatesInputRecursive4']
    NOT: List['TagScalarWhereWithAggregatesInputRecursive4']


class TagScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Tag arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']



class TagGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    _sum: 'TagSumAggregateOutput'
    _avg: 'TagAvgAggregateOutput'
    _min: 'TagMinAggregateOutput'
    _max: 'TagMaxAggregateOutput'
    _count: 'TagCountAggregateOutput'


class TagAvgAggregateOutput(TypedDict, total=False):
    """Tag output for aggregating averages"""


class TagSumAggregateOutput(TypedDict, total=False):
    """Tag output for aggregating sums"""


class TagScalarAggregateOutput(TypedDict, total=False):
    """Tag output including scalar fields"""
    id: _str
    name: _str


TagMinAggregateOutput = TagScalarAggregateOutput
TagMaxAggregateOutput = TagScalarAggregateOutput


class TagMaxAggregateInput(TypedDict, total=False):
    """Tag input for aggregating by max"""
    id: bool
    name: bool


class TagMinAggregateInput(TypedDict, total=False):
    """Tag input for aggregating by min"""
    id: bool
    name: bool


class TagNumberAggregateInput(TypedDict, total=False):
    """Tag input for aggregating numbers"""


TagAvgAggregateInput = TagNumberAggregateInput
TagSumAggregateInput = TagNumberAggregateInput


TagCountAggregateInput = TypedDict(
    'TagCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        '_all': bool,
    },
    total=False,
)

TagCountAggregateOutput = TypedDict(
    'TagCountAggregateOutput',
    {
        'id': int,
        'name': int,
        '_all': int,
    },
    total=False,
)


TagKeys = Literal[
    'id',
    'name',
    'posts',
    'PostTag',
]
TagScalarFieldKeys = Literal[
    'id',
    'name',
]
TagScalarFieldKeysT = TypeVar('TagScalarFieldKeysT', bound=TagScalarFieldKeys)

TagRelationalFieldKeys = Literal[
        'posts',
        'PostTag',
    ]

# PostTag types

class PostTagOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the PostTag create method"""
    post: 'PostCreateNestedWithoutRelationsInput'
    postId: _str
    tag: 'TagCreateNestedWithoutRelationsInput'
    tagId: _str


class PostTagCreateInput(PostTagOptionalCreateInput):
    """Required arguments to the PostTag create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PostTagOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the PostTag create method, without relations"""
    postId: _str
    tagId: _str


class PostTagCreateWithoutRelationsInput(PostTagOptionalCreateWithoutRelationsInput):
    """Required arguments to the PostTag create method, without relations"""


class PostTagCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PostTagCreateWithoutRelationsInput'
    connect: 'PostTagWhereUniqueInput'


class PostTagCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PostTagCreateWithoutRelationsInput', List['PostTagCreateWithoutRelationsInput']]
    connect: Union['PostTagWhereUniqueInput', List['PostTagWhereUniqueInput']]


_PostTagCompoundPrimaryKeyInner = TypedDict(
    '_PostTagCompoundPrimaryKeyInner',
    {
        'postId': '_str',
        'tagId': '_str',
    },
    total=True
)

_PostTagCompoundPrimaryKey = TypedDict(
    '_PostTagCompoundPrimaryKey',
    {
        'postId_tagId': '_PostTagCompoundPrimaryKeyInner',
    },
    total=True
)

PostTagWhereUniqueInput = _PostTagCompoundPrimaryKey


class PostTagUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    post: 'PostUpdateOneWithoutRelationsInput'
    tag: 'TagUpdateOneWithoutRelationsInput'


class PostTagUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""


class PostTagUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PostTagCreateWithoutRelationsInput']
    connect: List['PostTagWhereUniqueInput']
    set: List['PostTagWhereUniqueInput']
    disconnect: List['PostTagWhereUniqueInput']
    delete: List['PostTagWhereUniqueInput']

    # TODO
    # update: List['PostTagUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PostTagUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PostTagScalarWhereInput']
    # upsert: List['PostTagUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['PostTagCreateOrConnectWithoutRelationsInput']


class PostTagUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PostTagCreateWithoutRelationsInput'
    connect: 'PostTagWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PostTagUpdateInput'
    # upsert: 'PostTagUpsertWithoutRelationsInput'
    # connectOrCreate: 'PostTagCreateOrConnectWithoutRelationsInput'


class PostTagUpsertInput(TypedDict):
    create: 'PostTagCreateInput'
    update: 'PostTagUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_PostTag_postId_OrderByInput = TypedDict(
    '_PostTag_postId_OrderByInput',
    {
        'postId': 'SortOrder',
    },
    total=True
)

_PostTag_tagId_OrderByInput = TypedDict(
    '_PostTag_tagId_OrderByInput',
    {
        'tagId': 'SortOrder',
    },
    total=True
)

PostTagOrderByInput = Union[
    '_PostTag_postId_OrderByInput',
    '_PostTag_tagId_OrderByInput',
]



# recursive PostTag types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PostTagRelationFilter = TypedDict(
    'PostTagRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PostTagListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PostTagInclude(TypedDict, total=False):
    """PostTag relational arguments"""
    post: Union[bool, 'PostArgsFromPostTag']
    tag: Union[bool, 'TagArgsFromPostTag']


    

class UserIncludeFromPostTag(TypedDict, total=False):
    """Relational arguments for PostTag"""
    posts: Union[bool, 'FindManyPostArgsFromPostTagRecursive1']


class UserIncludeFromPostTagRecursive1(TypedDict, total=False):
    """Relational arguments for PostTag"""
    posts: Union[bool, 'FindManyPostArgsFromPostTagRecursive2']


class UserIncludeFromPostTagRecursive2(TypedDict, total=False):
    """Relational arguments for PostTag"""
    posts: Union[bool, 'FindManyPostArgsFromPostTagRecursive3']


class UserIncludeFromPostTagRecursive3(TypedDict, total=False):
    """Relational arguments for PostTag"""
    posts: Union[bool, 'FindManyPostArgsFromPostTagRecursive4']


class UserIncludeFromPostTagRecursive4(TypedDict, total=False):
    """Relational arguments for PostTag"""

    

class UserArgsFromPostTag(TypedDict, total=False):
    """Arguments for PostTag"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPostTagRecursive1(TypedDict, total=False):
    """Arguments for PostTag"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPostTagRecursive2(TypedDict, total=False):
    """Arguments for PostTag"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPostTagRecursive3(TypedDict, total=False):
    """Arguments for PostTag"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPostTagRecursive4(TypedDict, total=False):
    """Arguments for PostTag"""
    
    

class FindManyUserArgsFromPostTag(TypedDict, total=False):
    """Arguments for PostTag"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPostTagRecursive1(TypedDict, total=False):
    """Arguments for PostTag"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPostTagRecursive2(TypedDict, total=False):
    """Arguments for PostTag"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPostTagRecursive3(TypedDict, total=False):
    """Arguments for PostTag"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPostTagRecursive4(TypedDict, total=False):
    """Arguments for PostTag"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class PostIncludeFromPostTag(TypedDict, total=False):
    """Relational arguments for PostTag"""
    user: Union[bool, 'UserArgsFromPostTagRecursive1']
    tags: Union[bool, 'FindManyTagArgsFromPostTagRecursive1']
    PostTag: Union[bool, 'FindManyPostTagArgsFromPostTagRecursive1']


class PostIncludeFromPostTagRecursive1(TypedDict, total=False):
    """Relational arguments for PostTag"""
    user: Union[bool, 'UserArgsFromPostTagRecursive2']
    tags: Union[bool, 'FindManyTagArgsFromPostTagRecursive2']
    PostTag: Union[bool, 'FindManyPostTagArgsFromPostTagRecursive2']


class PostIncludeFromPostTagRecursive2(TypedDict, total=False):
    """Relational arguments for PostTag"""
    user: Union[bool, 'UserArgsFromPostTagRecursive3']
    tags: Union[bool, 'FindManyTagArgsFromPostTagRecursive3']
    PostTag: Union[bool, 'FindManyPostTagArgsFromPostTagRecursive3']


class PostIncludeFromPostTagRecursive3(TypedDict, total=False):
    """Relational arguments for PostTag"""
    user: Union[bool, 'UserArgsFromPostTagRecursive4']
    tags: Union[bool, 'FindManyTagArgsFromPostTagRecursive4']
    PostTag: Union[bool, 'FindManyPostTagArgsFromPostTagRecursive4']


class PostIncludeFromPostTagRecursive4(TypedDict, total=False):
    """Relational arguments for PostTag"""

    

class PostArgsFromPostTag(TypedDict, total=False):
    """Arguments for PostTag"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromPostTagRecursive1(TypedDict, total=False):
    """Arguments for PostTag"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromPostTagRecursive2(TypedDict, total=False):
    """Arguments for PostTag"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromPostTagRecursive3(TypedDict, total=False):
    """Arguments for PostTag"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromPostTagRecursive4(TypedDict, total=False):
    """Arguments for PostTag"""
    
    

class FindManyPostArgsFromPostTag(TypedDict, total=False):
    """Arguments for PostTag"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromPostTagRecursive1(TypedDict, total=False):
    """Arguments for PostTag"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromPostTagRecursive2(TypedDict, total=False):
    """Arguments for PostTag"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromPostTagRecursive3(TypedDict, total=False):
    """Arguments for PostTag"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromPostTagRecursive4(TypedDict, total=False):
    """Arguments for PostTag"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    
    

class TagIncludeFromPostTag(TypedDict, total=False):
    """Relational arguments for PostTag"""
    posts: Union[bool, 'FindManyPostArgsFromPostTagRecursive1']
    PostTag: Union[bool, 'FindManyPostTagArgsFromPostTagRecursive1']


class TagIncludeFromPostTagRecursive1(TypedDict, total=False):
    """Relational arguments for PostTag"""
    posts: Union[bool, 'FindManyPostArgsFromPostTagRecursive2']
    PostTag: Union[bool, 'FindManyPostTagArgsFromPostTagRecursive2']


class TagIncludeFromPostTagRecursive2(TypedDict, total=False):
    """Relational arguments for PostTag"""
    posts: Union[bool, 'FindManyPostArgsFromPostTagRecursive3']
    PostTag: Union[bool, 'FindManyPostTagArgsFromPostTagRecursive3']


class TagIncludeFromPostTagRecursive3(TypedDict, total=False):
    """Relational arguments for PostTag"""
    posts: Union[bool, 'FindManyPostArgsFromPostTagRecursive4']
    PostTag: Union[bool, 'FindManyPostTagArgsFromPostTagRecursive4']


class TagIncludeFromPostTagRecursive4(TypedDict, total=False):
    """Relational arguments for PostTag"""

    

class TagArgsFromPostTag(TypedDict, total=False):
    """Arguments for PostTag"""
    include: 'TagIncludeFromTagRecursive1'


class TagArgsFromPostTagRecursive1(TypedDict, total=False):
    """Arguments for PostTag"""
    include: 'TagIncludeFromTagRecursive2'


class TagArgsFromPostTagRecursive2(TypedDict, total=False):
    """Arguments for PostTag"""
    include: 'TagIncludeFromTagRecursive3'


class TagArgsFromPostTagRecursive3(TypedDict, total=False):
    """Arguments for PostTag"""
    include: 'TagIncludeFromTagRecursive4'


class TagArgsFromPostTagRecursive4(TypedDict, total=False):
    """Arguments for PostTag"""
    
    

class FindManyTagArgsFromPostTag(TypedDict, total=False):
    """Arguments for PostTag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive1'


class FindManyTagArgsFromPostTagRecursive1(TypedDict, total=False):
    """Arguments for PostTag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive2'


class FindManyTagArgsFromPostTagRecursive2(TypedDict, total=False):
    """Arguments for PostTag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive3'


class FindManyTagArgsFromPostTagRecursive3(TypedDict, total=False):
    """Arguments for PostTag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    include: 'TagIncludeFromTagRecursive4'


class FindManyTagArgsFromPostTagRecursive4(TypedDict, total=False):
    """Arguments for PostTag"""
    take: int
    skip: int
    order_by: Union['TagOrderByInput', List['TagOrderByInput']]
    where: 'TagWhereInput'
    cursor: 'TagWhereUniqueInput'
    distinct: List['TagScalarFieldKeys']
    
    

class PostTagIncludeFromPostTag(TypedDict, total=False):
    """Relational arguments for PostTag"""
    post: Union[bool, 'PostArgsFromPostTagRecursive1']
    tag: Union[bool, 'TagArgsFromPostTagRecursive1']


class PostTagIncludeFromPostTagRecursive1(TypedDict, total=False):
    """Relational arguments for PostTag"""
    post: Union[bool, 'PostArgsFromPostTagRecursive2']
    tag: Union[bool, 'TagArgsFromPostTagRecursive2']


class PostTagIncludeFromPostTagRecursive2(TypedDict, total=False):
    """Relational arguments for PostTag"""
    post: Union[bool, 'PostArgsFromPostTagRecursive3']
    tag: Union[bool, 'TagArgsFromPostTagRecursive3']


class PostTagIncludeFromPostTagRecursive3(TypedDict, total=False):
    """Relational arguments for PostTag"""
    post: Union[bool, 'PostArgsFromPostTagRecursive4']
    tag: Union[bool, 'TagArgsFromPostTagRecursive4']


class PostTagIncludeFromPostTagRecursive4(TypedDict, total=False):
    """Relational arguments for PostTag"""

    

class PostTagArgsFromPostTag(TypedDict, total=False):
    """Arguments for PostTag"""
    include: 'PostTagIncludeFromPostTagRecursive1'


class PostTagArgsFromPostTagRecursive1(TypedDict, total=False):
    """Arguments for PostTag"""
    include: 'PostTagIncludeFromPostTagRecursive2'


class PostTagArgsFromPostTagRecursive2(TypedDict, total=False):
    """Arguments for PostTag"""
    include: 'PostTagIncludeFromPostTagRecursive3'


class PostTagArgsFromPostTagRecursive3(TypedDict, total=False):
    """Arguments for PostTag"""
    include: 'PostTagIncludeFromPostTagRecursive4'


class PostTagArgsFromPostTagRecursive4(TypedDict, total=False):
    """Arguments for PostTag"""
    
    

class FindManyPostTagArgsFromPostTag(TypedDict, total=False):
    """Arguments for PostTag"""
    take: int
    skip: int
    order_by: Union['PostTagOrderByInput', List['PostTagOrderByInput']]
    where: 'PostTagWhereInput'
    cursor: 'PostTagWhereUniqueInput'
    distinct: List['PostTagScalarFieldKeys']
    include: 'PostTagIncludeFromPostTagRecursive1'


class FindManyPostTagArgsFromPostTagRecursive1(TypedDict, total=False):
    """Arguments for PostTag"""
    take: int
    skip: int
    order_by: Union['PostTagOrderByInput', List['PostTagOrderByInput']]
    where: 'PostTagWhereInput'
    cursor: 'PostTagWhereUniqueInput'
    distinct: List['PostTagScalarFieldKeys']
    include: 'PostTagIncludeFromPostTagRecursive2'


class FindManyPostTagArgsFromPostTagRecursive2(TypedDict, total=False):
    """Arguments for PostTag"""
    take: int
    skip: int
    order_by: Union['PostTagOrderByInput', List['PostTagOrderByInput']]
    where: 'PostTagWhereInput'
    cursor: 'PostTagWhereUniqueInput'
    distinct: List['PostTagScalarFieldKeys']
    include: 'PostTagIncludeFromPostTagRecursive3'


class FindManyPostTagArgsFromPostTagRecursive3(TypedDict, total=False):
    """Arguments for PostTag"""
    take: int
    skip: int
    order_by: Union['PostTagOrderByInput', List['PostTagOrderByInput']]
    where: 'PostTagWhereInput'
    cursor: 'PostTagWhereUniqueInput'
    distinct: List['PostTagScalarFieldKeys']
    include: 'PostTagIncludeFromPostTagRecursive4'


class FindManyPostTagArgsFromPostTagRecursive4(TypedDict, total=False):
    """Arguments for PostTag"""
    take: int
    skip: int
    order_by: Union['PostTagOrderByInput', List['PostTagOrderByInput']]
    where: 'PostTagWhereInput'
    cursor: 'PostTagWhereUniqueInput'
    distinct: List['PostTagScalarFieldKeys']
    


FindManyPostTagArgs = FindManyPostTagArgsFromPostTag
FindFirstPostTagArgs = FindManyPostTagArgsFromPostTag


    

class PostTagWhereInput(TypedDict, total=False):
    """PostTag arguments for searching"""
    post: 'PostRelationFilter'
    postId: Union[_str, 'types.StringFilter']
    tag: 'TagRelationFilter'
    tagId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['PostTagWhereInputRecursive1', List['PostTagWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PostTagWhereInputRecursive1']
    OR: List['PostTagWhereInputRecursive1']
    NOT: List['PostTagWhereInputRecursive1']


class PostTagWhereInputRecursive1(TypedDict, total=False):
    """PostTag arguments for searching"""
    post: 'PostRelationFilter'
    postId: Union[_str, 'types.StringFilter']
    tag: 'TagRelationFilter'
    tagId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['PostTagWhereInputRecursive2', List['PostTagWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PostTagWhereInputRecursive2']
    OR: List['PostTagWhereInputRecursive2']
    NOT: List['PostTagWhereInputRecursive2']


class PostTagWhereInputRecursive2(TypedDict, total=False):
    """PostTag arguments for searching"""
    post: 'PostRelationFilter'
    postId: Union[_str, 'types.StringFilter']
    tag: 'TagRelationFilter'
    tagId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['PostTagWhereInputRecursive3', List['PostTagWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PostTagWhereInputRecursive3']
    OR: List['PostTagWhereInputRecursive3']
    NOT: List['PostTagWhereInputRecursive3']


class PostTagWhereInputRecursive3(TypedDict, total=False):
    """PostTag arguments for searching"""
    post: 'PostRelationFilter'
    postId: Union[_str, 'types.StringFilter']
    tag: 'TagRelationFilter'
    tagId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['PostTagWhereInputRecursive4', List['PostTagWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PostTagWhereInputRecursive4']
    OR: List['PostTagWhereInputRecursive4']
    NOT: List['PostTagWhereInputRecursive4']


class PostTagWhereInputRecursive4(TypedDict, total=False):
    """PostTag arguments for searching"""
    post: 'PostRelationFilter'
    postId: Union[_str, 'types.StringFilter']
    tag: 'TagRelationFilter'
    tagId: Union[_str, 'types.StringFilter']



# aggregate PostTag types


    

class PostTagScalarWhereWithAggregatesInput(TypedDict, total=False):
    """PostTag arguments for searching"""
    postId: Union[_str, 'types.StringWithAggregatesFilter']
    tagId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PostTagScalarWhereWithAggregatesInputRecursive1']
    OR: List['PostTagScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PostTagScalarWhereWithAggregatesInputRecursive1']


class PostTagScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """PostTag arguments for searching"""
    postId: Union[_str, 'types.StringWithAggregatesFilter']
    tagId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PostTagScalarWhereWithAggregatesInputRecursive2']
    OR: List['PostTagScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PostTagScalarWhereWithAggregatesInputRecursive2']


class PostTagScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """PostTag arguments for searching"""
    postId: Union[_str, 'types.StringWithAggregatesFilter']
    tagId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PostTagScalarWhereWithAggregatesInputRecursive3']
    OR: List['PostTagScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PostTagScalarWhereWithAggregatesInputRecursive3']


class PostTagScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """PostTag arguments for searching"""
    postId: Union[_str, 'types.StringWithAggregatesFilter']
    tagId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['PostTagScalarWhereWithAggregatesInputRecursive4']
    OR: List['PostTagScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PostTagScalarWhereWithAggregatesInputRecursive4']


class PostTagScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """PostTag arguments for searching"""
    postId: Union[_str, 'types.StringWithAggregatesFilter']
    tagId: Union[_str, 'types.StringWithAggregatesFilter']



class PostTagGroupByOutput(TypedDict, total=False):
    postId: _str
    tagId: _str
    _sum: 'PostTagSumAggregateOutput'
    _avg: 'PostTagAvgAggregateOutput'
    _min: 'PostTagMinAggregateOutput'
    _max: 'PostTagMaxAggregateOutput'
    _count: 'PostTagCountAggregateOutput'


class PostTagAvgAggregateOutput(TypedDict, total=False):
    """PostTag output for aggregating averages"""


class PostTagSumAggregateOutput(TypedDict, total=False):
    """PostTag output for aggregating sums"""


class PostTagScalarAggregateOutput(TypedDict, total=False):
    """PostTag output including scalar fields"""
    postId: _str
    tagId: _str


PostTagMinAggregateOutput = PostTagScalarAggregateOutput
PostTagMaxAggregateOutput = PostTagScalarAggregateOutput


class PostTagMaxAggregateInput(TypedDict, total=False):
    """PostTag input for aggregating by max"""
    postId: bool
    tagId: bool


class PostTagMinAggregateInput(TypedDict, total=False):
    """PostTag input for aggregating by min"""
    postId: bool
    tagId: bool


class PostTagNumberAggregateInput(TypedDict, total=False):
    """PostTag input for aggregating numbers"""


PostTagAvgAggregateInput = PostTagNumberAggregateInput
PostTagSumAggregateInput = PostTagNumberAggregateInput


PostTagCountAggregateInput = TypedDict(
    'PostTagCountAggregateInput',
    {
        'postId': bool,
        'tagId': bool,
        '_all': bool,
    },
    total=False,
)

PostTagCountAggregateOutput = TypedDict(
    'PostTagCountAggregateOutput',
    {
        'postId': int,
        'tagId': int,
        '_all': int,
    },
    total=False,
)


PostTagKeys = Literal[
    'post',
    'postId',
    'tag',
    'tagId',
]
PostTagScalarFieldKeys = Literal[
    'postId',
    'tagId',
]
PostTagScalarFieldKeysT = TypeVar('PostTagScalarFieldKeysT', bound=PostTagScalarFieldKeys)

PostTagRelationalFieldKeys = Literal[
        'post',
        'tag',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields